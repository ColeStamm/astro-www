let{assign:t}=Object,{stringify:e}=JSON,{at:r,indexOf:s,push:l,splice:n}=Array.prototype,i=Object.create(null),o={url:"",method:"GET",headers:{},body:null,referrer:"about:client",referrerPolicy:"",mode:"cors",credentials:"same-origin",cache:"default",redirect:"follow",integrity:"",keepalive:!1},a=Object.create(null);export class XRequest extends Request{#t=null;#e=null;#r=null;constructor(t){let r=((t,e)=>{t=null==t?i:"object"==typeof t?t:{url:t};for(let r in o)e[r]=r in t?t[r]:o[r];return e})(t,{}),s=e(r);if(s in a)return a[s];let l=new AbortController;r.signal=l.signal,a[s]=super(r.url,r),this.#t=l,this.#e=new Request(r.url,r)}abort(){this.#t.abort()}async fetch(){if(!this.#r){this.#e.signal.aborted&&(this.#t=new AbortController,this.#e=new Request(this.#e,{signal:this.#t.signal}));try{this.#r=await fetch(this.#e)}catch{return null}}return this.#r.clone()}async text(){try{let t=await this.fetch();return await t.text()}catch(t){return console.warn(t),null}}get done(){return null!==this.#r}}export class XRequestSet extends Set{#s=null;add(t){if(t!==this[this.length-1]){let e=s.call(this,t);e>-1&&n.call(this,e,1),l.call(this,t)}return this}at(t){return r.call(this,t)}get size(){return this.length||0}abort(){let t=this.at(-1),e=this.#s;e&&e!==t&&!e.done&&e.abort()}async text(){let t=this.at(-1);this.#s;return this.abort(),this.#s=t,await t.text()}}