---
import { For, When } from '@astropub/flow'
import { markdown } from '@astropub/md'
import './compliance.css'

export interface Props {
	compliance: typeof import('project:data/compliance.json')
}

const { isArray } = Array

const toNumeral = (content: any, ruleset: any, rule: any) => [ content.numeral, ruleset.numeral, rule.numeral].join('.')

const toStatusClassNames = (rule: any) => `compliance-status -${rule.status}`

const props = Astro.props as Props
const currentPathname = Astro.url.pathname
const contents = props.compliance.contents
const shouldDisplayCompliance = contents.find(
	content => content.rulesets?.find(
		ruleset => ruleset.link === currentPathname
	)
)
---
<When {shouldDisplayCompliance}>
	<aside class="p-compliance-aside">
		<header class="-header">
			<h2 class="-heading">Compliance Requirements</h2>
			<p class="-version">(v{props.compliance.version })</p>
		</header>

		<For of={props.compliance.contents}>{content => (
			<section class="p-compliance">
				<When {isArray(content.rulesets)}>
					<For of={content.rulesets!}>{ruleset => (
						<When {ruleset.link === currentPathname} {isArray(ruleset.rules!)}>
							<section class="ruleset">
								<For of={ruleset.rules!}>{rule =>(
									<dl class="rule-aside">
										<dt class="-numeral">{toNumeral(content, ruleset, rule)}</dt>

										<dd class="-details">
											<span class="-content">{markdown.inline(rule.rule)}</span>
											<When {rule.status !=='current' } {rule.status !=='updated'} {rule.status !=='under-review' }>
												<span class={toStatusClassNames(rule)}>{rule.status}</span>
											</When>
										</dd>
									</dl>
								)}</For>
							</section>
						</When>
					)}</For>
				</When>
			</section>
		)}</For>

		<footer class="-footer">
			<p>
				<a href="/compliance/">See all EGS Compliance Requirements</a>
			</p>
		</footer>
	</aside>
</When>